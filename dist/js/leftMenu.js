// Generated by CoffeeScript 1.9.0
(function() {
  var LeftMenu, LeftMenuItem, a, div, i, img, li, ol, span, _ref;

  _ref = React.DOM, div = _ref.div, a = _ref.a, ol = _ref.ol, li = _ref.li, i = _ref.i, span = _ref.span, img = _ref.img;

  LeftMenu = React.createFactory(React.createClass({
    getInitialState: function() {
      return {
        showModal: false,
        menu: this.setInitialVisibility(this.props.menu_data)
      };
    },
    setInitialVisibility: function(menu) {
      var menu_item, _i, _len;
      for (_i = 0, _len = menu.length; _i < _len; _i++) {
        menu_item = menu[_i];
        if (menu_item.parent != null) {
          menu_item.visible = 0;
        }
      }
      return menu;
    },
    open: function() {
      return this.setState({
        showModal: true
      });
    },
    toggleVisibilityOfChildrenOf: function(slug, visibility_value) {
      var activeMenu, menu_item, _i, _len;
      if (visibility_value == null) {
        visibility_value = null;
      }
      activeMenu = this.state.menu;
      for (_i = 0, _len = activeMenu.length; _i < _len; _i++) {
        menu_item = activeMenu[_i];
        if ((menu_item.parent != null) && menu_item.parent === slug) {
          if (menu_item.visible === 0) {
            menu_item.visible = 1;
          } else if (menu_item.visible === 1) {
            menu_item.visible = 0;
          }
          if (visibility_value != null) {
            menu_item.visible = visibility_value;
          }
          if ((menu_item.children != null) && menu_item.visible === 0) {
            this.toggleVisibilityOfChildrenOf(menu_item.children, 0);
          }
        }
      }
      return this.setState({
        menu: activeMenu
      });
    },
    showSubMenu: function(slug) {
      var menu, menu_item, _i, _len;
      menu = this.state.menu;
      for (_i = 0, _len = menu.length; _i < _len; _i++) {
        menu_item = menu[_i];
        if ((menu_item.parent != null) && menu_item.parent !== slug) {
          menu_item.visible = 0;
        } else {
          menu_item.visible = 1;
        }
      }
      return this.setState({
        menu: menu
      });
    },
    showSubMenuItems: function(menu_item) {
      var menus;
      if (menu_item.children != null) {
        menus = this.state.menu;
        return this.toggleVisibilityOfChildrenOf(menu_item.children);
      } else {
        if (menu_item.url != null) {
          return window.location = menu_item.url;
        }
      }
    },
    hideSubMenu: function() {
      this.setState({
        activeSubMenu: []
      });
      return this.setState({
        mainParent: ''
      });
    },
    generateListOfChildren: function(slug) {
      var child_item, child_menu_items, menu_items, _i, _len;
      menu_items = [];
      for (_i = 0, _len = menuData.length; _i < _len; _i++) {
        child_item = menuData[_i];
        if (child_item.parent === slug) {
          menu_items.push(child_item);
          if ((child_item.children != null) && (child_item.parent != null)) {
            child_menu_items = this.generateListOfChildren(child_item.children);
            menu_items = menu_items.concat(child_menu_items);
          }
        }
      }
      return menu_items;
    },
    render: function() {
      var menu_item, menu_items;
      menu_items = this.props.menu_data;
      div({
        className: "scaffold__menu-close-btn"
      }, "X");
      return div({
        className: "left-menu"
      }, (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = menu_items.length; _i < _len; _i++) {
          menu_item = menu_items[_i];
          if (menu_item.visible === 1) {
            _results.push(LeftMenuItem({
              menu_item: menu_item,
              showSubMenuItems: (function(_this) {
                return function(e) {
                  return _this.showSubMenuItems(e);
                };
              })(this)
            }));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }).call(this));
    }
  }));

  LeftMenuItem = React.createFactory(React.createClass({
    menuItemClicked: function() {
      console.log(this.props.menu_item);
      return this.props.showSubMenuItems(this.props.menu_item);
    },
    render: function() {
      var menu_item, menu_item_options;
      menu_item_options = {};
      menu_item = this.props.menu_item;
      if (menu_item.children) {
        menu_item_options['data-role'] = 'has_submenu';
        menu_item_options['data-children'] = menu_item.slug;
      }
      if (menu_item.parent) {
        menu_item_options['data-parent'] = menu_item.parent;
      }
      if (menu_item.url != null) {
        menu_item_options['data-url'] = menu_item.url;
      }
      menu_item_options.className = 'left-menu__item-depth-';
      menu_item_options.className += window.determineDepth(menu_item);
      menu_item_options.onClick = this.menuItemClicked;
      return div(menu_item_options, menu_item.name);
    }
  }));

  window.LeftMenu = LeftMenu;

}).call(this);
