// Generated by CoffeeScript 1.9.0
(function() {
  var SubMenu, SubMenuItem, a, div, i, img, li, ol, span, _ref;

  _ref = React.DOM, div = _ref.div, a = _ref.a, ol = _ref.ol, li = _ref.li, i = _ref.i, span = _ref.span, img = _ref.img;


  /*
    SUB MENU - THIS IS FOR EVERYTHING THAT DROPS BELOW THE MAIN NAV STRIP
    INCLUDING THE OVERFLOW
   */

  SubMenu = React.createFactory(React.createClass({
    getInitialState: function() {
      return {
        menu: [],
        mainParent: ''
      };
    },
    componentDidMount: function() {
      return this.repositionSelf();
    },
    componentDidUpdate: function() {
      return this.repositionSelf();
    },
    repositionSelf: function() {
      var targ;
      if (this.props.mainParent === 'overflow') {
        targ = $(".top-menu__overflow");
      } else {
        targ = $(".top-menu__main").find('*[data-children="' + this.props.mainParent + '"]');
      }
      return $(".sub-menu").css('left', (targ.offset().left));
    },
    render: function() {
      var menu_item;
      return div({
        className: "sub-menu"
      }, (function() {
        var _i, _len, _ref1, _results;
        _ref1 = this.props.menu;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          menu_item = _ref1[_i];
          if (menu_item.visible === 1) {
            _results.push(SubMenuItem({
              menu_item: menu_item,
              showSubMenuItems: (function(_this) {
                return function(e) {
                  return _this.props.showSubMenuItems(e);
                };
              })(this),
              menu: this.props.menu
            }));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }).call(this));
    }
  }));

  SubMenuItem = React.createFactory(React.createClass({
    menuItemClicked: function() {
      return this.props.showSubMenuItems(this.props.menu_item);
    },
    render: function() {
      var menu_item, menu_item_options;
      menu_item = this.props.menu_item;
      menu_item_options = {
        className: "sub-menu__item"
      };
      if (menu_item.children) {
        menu_item_options['data-role'] = 'has_submenu';
        menu_item_options['data-children'] = menu_item.slug;
      }
      if ((menu_item.parent != null) && menu_item.parent !== this.props.mainParent) {
        menu_item_options['data-parent'] = menu_item.parent;
      }
      if (menu_item.url != null) {
        menu_item_options['data-url'] = menu_item.url;
      }
      menu_item_options.className = 'sub-menu__item-depth-';
      menu_item_options.className += window.determineDepth(menu_item);
      menu_item_options.onClick = this.menuItemClicked;
      if (menu_item.hidden == null) {
        return div(menu_item_options, menu_item.name);
      }
    }
  }));

  window.SubMenu = SubMenu;

}).call(this);
