// Generated by CoffeeScript 1.9.0
(function() {
  var Modal, TopMenu, TopMenuItem, a, div, i, img, li, ol, span, _ref;

  _ref = React.DOM, div = _ref.div, a = _ref.a, ol = _ref.ol, li = _ref.li, i = _ref.i, span = _ref.span, img = _ref.img;

  TopMenu = React.createFactory(React.createClass({
    getInitialState: function() {
      return {
        mainMenu: [],
        overflowMenu: [],
        activeSubMenu: [],
        menus: {},
        showModal: false
      };
    },
    componentWillMount: function() {
      window.addEventListener('resize', this.recalculateTopMenu);
      return this.populateMenus();
    },
    componentDidMount: function() {
      return this.populateMenus();
    },
    recalculateTopMenu: function() {
      this.hideSubMenu();
      return this.populateMenus();
    },
    componentWillUnMount: function() {
      return window.removeEventListener('resize', this.recalculateTopMenu);
    },
    toggleVisibilityOfChildrenOf: function(slug, visibility_value) {
      var activeMenu, menu_item, menus, _i, _len;
      if (visibility_value == null) {
        visibility_value = null;
      }
      menus = this.state.menus;
      activeMenu = menus[this.state.activeSubMenu];
      for (_i = 0, _len = activeMenu.length; _i < _len; _i++) {
        menu_item = activeMenu[_i];
        if ((menu_item.parent != null) && menu_item.parent === slug) {
          if (menu_item.visible === 0) {
            menu_item.visible = 1;
          } else if (menu_item.visible === 1) {
            menu_item.visible = 0;
          }
          if (visibility_value != null) {
            menu_item.visible = visibility_value;
          }
          if ((menu_item.children != null) && menu_item.visible === 0) {
            this.toggleVisibilityOfChildrenOf(menu_item.children, 0);
          }
        }
      }
      menus[this.state.activeSubMenu] = activeMenu;
      return this.setState({
        menus: menus
      });
    },
    showSubMenuItems: function(menu_item) {
      var menus;
      if (menu_item.children != null) {
        menus = this.state.menus[this.state.activeSubMenu];
        return this.toggleVisibilityOfChildrenOf(menu_item.children);
      } else {
        if (menu_item.url != null) {
          return window.location = menu_item.url;
        }
      }
    },
    populateMenus: function() {
      var availableWidth, mainMenu, menu_item, menus, overflowMenu, _i, _len;
      this.currentWidth = 0;
      mainMenu = [];
      overflowMenu = [];
      menus = {};
      availableWidth = $(".top-menu__main").outerWidth() - 20;
      if (availableWidth == null) {
        availableWidth = 0;
      }
      for (_i = 0, _len = menuData.length; _i < _len; _i++) {
        menu_item = menuData[_i];
        if (menu_item.parent == null) {
          menu_item.visible = 1;
          this.currentWidth += menu_item.topWidth;
          if (menu_item.children != null) {
            menus[menu_item.slug] = this.generateListOfChildren(menu_item.slug);
          }
        } else {
          menu_item.visible = 0;
        }
        if (this.currentWidth > availableWidth) {
          overflowMenu.push(menu_item);
        } else {
          mainMenu.push(menu_item);
        }
      }
      this.setState({
        mainMenu: mainMenu
      });
      this.setState({
        overflowMenu: overflowMenu
      });
      menus['overflow'] = overflowMenu;
      return this.setState({
        menus: menus
      });
    },
    showSubMenu: function(slug) {
      var all_menus, current_menu, menu_item, _i, _len;
      all_menus = this.state.menus;
      current_menu = all_menus[slug];
      for (_i = 0, _len = current_menu.length; _i < _len; _i++) {
        menu_item = current_menu[_i];
        if ((menu_item.parent != null) && menu_item.parent !== slug) {
          menu_item.visible = 0;
        } else {
          menu_item.visible = 1;
        }
      }
      all_menus[slug] = current_menu;
      this.setState({
        menus: all_menus
      });
      this.setState({
        mainParent: slug
      });
      return this.setState({
        activeSubMenu: slug
      });
    },
    hideSubMenu: function() {
      this.setState({
        activeSubMenu: []
      });
      return this.setState({
        mainParent: ''
      });
    },
    generateListOfChildren: function(slug) {
      var child_item, child_menu_items, menu_items, _i, _len;
      menu_items = [];
      for (_i = 0, _len = menuData.length; _i < _len; _i++) {
        child_item = menuData[_i];
        if (child_item.parent === slug) {
          menu_items.push(child_item);
          if ((child_item.children != null) && (child_item.parent != null)) {
            child_menu_items = this.generateListOfChildren(child_item.children);
            menu_items = menu_items.concat(child_menu_items);
          }
        }
      }
      return menu_items;
    },
    openLeftMenu: function() {
      this.setState({
        showModal: true
      });
      return window.openLeftMenu();
    },
    closeLeftMenu: function() {
      this.setState({
        showModal: false
      });
      return window.closeLeftMenu();
    },
    render: function() {
      var menu_item, overflow_menu_class;
      overflow_menu_class = "top-menu__overflow";
      if (this.state.overflowMenu.length < 1) {
        overflow_menu_class += "--hidden";
      }
      return div({
        className: "top-menu"
      }, div({
        className: "menu__open-side-menu",
        onClick: this.openLeftMenu
      }, "MENU"), div({
        className: "top-menu__content"
      }, div({
        className: "top-menu__main"
      }, (function() {
        var _i, _len, _ref1, _results;
        _ref1 = this.state.mainMenu;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          menu_item = _ref1[_i];
          if (menu_item.parent == null) {
            _results.push(TopMenuItem({
              menu_item: menu_item,
              showSubMenu: this.showSubMenu
            }));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }).call(this)), div({
        className: overflow_menu_class
      }, div({
        className: "top-menu__overflow-icon",
        onMouseOver: (function(_this) {
          return function(e) {
            return _this.showSubMenu('overflow');
          };
        })(this)
      }, "***")), this.state.activeSubMenu > '' ? window.SubMenu({
        menu: this.state.menus[this.state.activeSubMenu],
        mainParent: this.state.mainParent,
        showSubMenuItems: (function(_this) {
          return function(e) {
            return _this.showSubMenuItems(e);
          };
        })(this)
      }) : void 0), this.state.showModal === true ? Modal({
        closeLeftMenu: this.closeLeftMenu
      }) : void 0);
    }
  }));

  Modal = React.createFactory(React.createClass({
    render: function() {
      return div({
        className: 'scaffold__modal',
        onClick: this.props.closeLeftMenu
      });
    }
  }));

  TopMenuItem = React.createFactory(React.createClass({
    showSubMenu: function() {
      return this.props.showSubMenu(this.props.menu_item.slug);
    },
    render: function() {
      var menu_item, menu_item_options;
      menu_item = this.props.menu_item;
      menu_item_options = {
        className: "top-menu__item"
      };
      if (menu_item.children) {
        menu_item_options['data-role'] = 'has_submenu';
        menu_item_options['data-children'] = menu_item.slug;
        menu_item_options.onMouseOver = this.showSubMenu;
      }
      if (menu_item.parent) {
        menu_item_options['data-parent'] = menu_item.parent;
      }
      if (menu_item.url != null) {
        menu_item_options['data-url'] = menu_item.url;
      }
      return div(menu_item_options, menu_item.name);
    }
  }));

  window.TopMenu = TopMenu;

}).call(this);
