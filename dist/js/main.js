// Generated by CoffeeScript 1.9.0
(function() {
  var LeftMenu, LeftMenuItem, TopMenu, a, closeSideMenu, determineDepth, div, drawLeftMenu, drawTopMenu, dummyMenuData, getParentsOf, hideAllChildrenOf, i, img, li, menuData, ol, openSideMenu, parseMenu, showAllParentsOf, showSubMenuItems, sizeMatters, span, _ref;

  menuData = [];

  dummyMenuData = [
    {
      "name": "item s1",
      "slug": "item_1",
      "url": "thing.html"
    }, {
      "name": "item 2",
      "slug": "item_2",
      "children": [
        {
          "name": "item_2_1",
          "slug": "item_2_1",
          "url": "thing.html",
          "children": [
            {
              "name": "yeehaw?",
              "slug": "yeehaw",
              "children": [
                {
                  "name": "Yeehaw!",
                  "slug": "yeehaw_2"
                }
              ]
            }
          ]
        }
      ]
    }, {
      "name": "item 3",
      "slug": "item_3"
    }
  ];

  _ref = React.DOM, div = _ref.div, a = _ref.a, ol = _ref.ol, li = _ref.li, i = _ref.i, span = _ref.span, img = _ref.img;

  sizeMatters = new SizeMatters();

  $(function() {

    /*
      HASH FUNCTIONALITY IS FOR TESTING ONLY
      REMOVE FOR ANY PRODUCTION USE
     */
    var menuPath;
    if (window.location.hash) {
      $("body").addClass(window.location.hash.substr(1));
    }
    menuPath = 'json/menu.json';
    return $.ajax({
      url: menuPath,
      dataType: "json",
      type: 'GET',
      error: function(jqXHR, textStatus, errorThrown) {
        console.error("Unable to load menu data remotely: using dummy data");
        return parseMenu(dummyMenuData);
      },
      success: function(data, textStatus, jqXHR) {
        return parseMenu(data);
      }
    });
  });

  parseMenu = function(data, par) {
    var howBigOptions, menu, tempData, _i, _len;
    if (par == null) {
      par = null;
    }
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      menu = data[_i];
      tempData = {
        name: menu.name,
        slug: menu.slug,
        url: menu.url,
        leftWidth: null,
        topWidth: null
      };
      howBigOptions = {
        text: menu.name,
        className: "top-menu__item"
      };
      console.log(sizeMatters.howBigWillThisBe(howBigOptions));
      if (par) {
        tempData.parent = par;
      }
      if (menu.children) {
        tempData.children = menu.slug;
      }
      menuData.push(tempData);
      if (menu.children) {
        parseMenu(menu.children, menu.slug);
      }
    }
    if ((par == null) && data === dummyMenuData) {
      drawLeftMenu();
      return drawTopMenu();
    }
  };

  drawLeftMenu = function() {
    var obj, subMenuToActivate, submenu, submenus, where, _i, _len, _results;
    obj = {
      menu_data: menuData
    };
    where = document.getElementById("left-menu__holder");
    React.render(window.LeftMenu(obj), where);
    $(".menu__open-side-menu").on("click", function() {
      return openSideMenu();
    });
    $(".scaffold__menu-close-btn").on("click", function() {
      return closeSideMenu();
    });
    $("[class*='left-menu__item']").on("click", function() {
      return showSubMenuItems($(this));
    });
    submenus = [];
    $("*[data-role='has_submenu']").each(function() {
      return submenus.push($(this).data('children'));
    });
    _results = [];
    for (_i = 0, _len = submenus.length; _i < _len; _i++) {
      submenu = submenus[_i];
      if ($("body").hasClass(submenu)) {
        subMenuToActivate = $('*[data-children="' + submenu + '"]');
        showSubMenuItems(subMenuToActivate);
        if (subMenuToActivate.data('parent')) {
          _results.push(showAllParentsOf(subMenuToActivate));
        } else {
          _results.push(void 0);
        }
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  drawTopMenu = function() {
    var obj, where;
    obj = {
      menu_data: menuData
    };
    where = document.getElementById("top-menu__holder");
    return React.render(window.TopMenu(obj), where);
  };

  showSubMenuItems = function(subMenu) {
    var child_element_val, child_state, data_url, new_child_state;
    if (subMenu.data('role') === 'has_submenu') {
      child_state = subMenu.data('child_state');
      new_child_state = 'visible';
      if (child_state != null) {
        if (child_state === 'visible') {
          new_child_state = 'hidden';
        } else {
          new_child_state = 'visible';
        }
      }
      child_element_val = subMenu.data('children');
      $("*[data-parent='" + child_element_val + "']").each(function() {
        if (new_child_state === 'hidden') {
          $(this).slideUp();
          if ($(this).data('children')) {
            return hideAllChildrenOf($(this).data('children'));
          }
        } else if (new_child_state === 'visible') {
          $(this).slideDown();
          return $(this).show();
        }
      });
      return subMenu.data('child_state', new_child_state);
    } else {
      data_url = subMenu.data('url');
      if (data_url) {
        return window.location = data_url;
      }
    }
  };

  openSideMenu = function() {
    $(".scaffold__menu").addClass("scaffold__menu--open");
    $(".scaffold__content").addClass("scaffold__content--open");
    $(".scaffold").append("<div class='scaffold__modal'></div>");
    $(".scaffold__modal").addClass("scaffold__modal--open");
    return $(".scaffold__modal").on("click", function() {
      return closeSideMenu();
    });
  };

  closeSideMenu = function() {
    $(".scaffold__menu").removeClass("scaffold__menu--open");
    $(".scaffold__content").removeClass("scaffold__content--open");
    return $(".scaffold__modal").remove();
  };


  /*
    Recursive methods for hiding and showing submenu items
   */

  hideAllChildrenOf = function(val) {
    $("*[data-parent='" + val + "']").each(function() {
      $(this).slideUp();
      if ($(this).data('children')) {
        return hideAllChildrenOf($(this).data('children'));
      }
    });
    return $("*[data-children='" + val + "']").data('child_state', 'hidden');
  };

  showAllParentsOf = function(subMenu) {
    var parentID, parentMenuItem;
    parentID = subMenu.data('parent');
    parentMenuItem = $("*[data-children='" + parentID + "']");
    showSubMenuItems(parentMenuItem);
    if (parentMenuItem.data('parent')) {
      return showAllParentsOf(parentMenuItem);
    }
  };

  getParentsOf = function(item, depth) {
    var hasParent, item_parent, menu_item, _i, _len;
    hasParent = 0;
    item_parent = '';
    depth++;
    for (_i = 0, _len = menuData.length; _i < _len; _i++) {
      menu_item = menuData[_i];
      if (menu_item.slug === item && menu_item.parent) {
        hasParent = 1;
        item_parent = menu_item.parent;
      }
    }
    if (hasParent === 1) {
      return getParentsOf(item_parent, depth);
    } else {
      return depth;
    }
  };

  determineDepth = function(menu_item) {
    var depth;
    depth = 1;
    if (!menu_item.parent) {
      return depth;
    }
    return getParentsOf(menu_item.parent, depth);
  };


  /*
    REACT Code
   */

  LeftMenu = React.createFactory(React.createClass({
    render: function() {
      var menu_item, menu_items;
      menu_items = this.props.menu_data;
      div({
        className: "scaffold__menu-close-btn"
      }, "X");
      return div({
        className: "left-menu"
      }, (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = menu_items.length; _i < _len; _i++) {
          menu_item = menu_items[_i];
          _results.push(LeftMenuItem({
            item: menu_item
          }));
        }
        return _results;
      })());
    }
  }));

  LeftMenuItem = React.createFactory(React.createClass({
    render: function() {
      var menu_item, menu_item_options;
      menu_item_options = {};
      menu_item = this.props.item;
      if (menu_item.children) {
        menu_item_options['data-role'] = 'has_submenu';
        menu_item_options['data-children'] = menu_item.slug;
      }
      if (menu_item.parent) {
        menu_item_options['data-parent'] = menu_item.parent;
      }
      if (menu_item.url != null) {
        menu_item_options['data-url'] = menu_item.url;
      }
      menu_item_options.className = 'left-menu__item-depth-';
      menu_item_options.className += determineDepth(menu_item);
      return div(menu_item_options, menu_item.name);
    }
  }));

  window.LeftMenu = LeftMenu;

  TopMenu = React.createFactory(React.createClass({
    getInitialState: function() {
      return {
        mainMenu: [],
        overflowMenu: []
      };
    },
    componentWillMount: function() {
      return this.populateMenus();
    },
    populateMenus: function() {
      var availableWidth, mainMenu, menu_item, overflowMenu, _i, _len;
      this.currentWidth = 0;
      mainMenu = [];
      overflowMenu = [];
      availableWidth = 100000;
      console.log(menuData);
      for (_i = 0, _len = menuData.length; _i < _len; _i++) {
        menu_item = menuData[_i];
        this.currentWidth += menu_item.topWidth;
        console.log(this.currentWidth);
        if (this.currentWidth > availableWidth) {
          overflowMenu.push(menu_item);
        } else {
          mainMenu.push(menu_item);
        }
      }
      this.setState({
        mainMenu: mainMenu
      });
      this.setState({
        overflowMenu: overflowMenu
      });
      return this.render();
    },
    render: function() {
      var menu_item;
      return div({
        className: "top-menu"
      }, div({
        className: "top-menu__main"
      }, (function() {
        var _i, _len, _ref1, _results;
        _ref1 = this.state.mainMenu;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          menu_item = _ref1[_i];
          _results.push(div({
            className: "top-menu__item"
          }, menu_item.name));
        }
        return _results;
      }).call(this)), div({
        className: "top-menu__overflow"
      }, div({
        className: "top-menu__overflow-icon"
      }, "***"), div({
        className: "top-menu__overflow-content"
      }, (function() {
        var _i, _len, _ref1, _results;
        _ref1 = this.state.overflowMenu;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          menu_item = _ref1[_i];
          _results.push(div({
            className: "top-menu__item"
          }, menu_item.name));
        }
        return _results;
      }).call(this))));
    }
  }));

  window.TopMenu = TopMenu;

}).call(this);
