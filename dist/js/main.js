// Generated by CoffeeScript 1.9.0
(function() {
  var a, div, drawLeftMenu, drawTopMenu, dummyMenuData, fitTestText, getParentsOf, i, img, li, menuData, ol, parseMenu, showFitTest, showSubMenuItems, sizeMatters, span, _ref;

  window.menuData = menuData = [];

  dummyMenuData = [
    {
      "name": "item s1",
      "slug": "item_1",
      "url": "thing.html"
    }, {
      "name": "item 2",
      "slug": "item_2",
      "children": [
        {
          "name": "item_2_1",
          "slug": "item_2_1",
          "url": "thing.html",
          "children": [
            {
              "name": "yeehaw?",
              "slug": "yeehaw",
              "children": [
                {
                  "name": "Yeehaw!",
                  "slug": "yeehaw_2",
                  "url": "http://yahoo.com"
                }
              ]
            }
          ]
        }
      ]
    }, {
      "name": "item 3",
      "slug": "item_3"
    }, {
      "name": "item 4",
      "slug": "item_4"
    }, {
      "name": "item 5",
      "slug": "item_5"
    }, {
      "name": "item 6",
      "slug": "item_6"
    }, {
      "name": "item 7",
      "slug": "item_7"
    }, {
      "name": "item 8",
      "slug": "item_8",
      "children": [
        {
          "name": "child of 8",
          "slug": "child_of_8"
        }
      ]
    }, {
      "name": "item 9",
      "slug": "item_9"
    }, {
      "name": "item 10",
      "slug": "item_10",
      "children": [
        {
          "name": "1",
          "slug": "item_1",
          "url": "thing.html"
        }, {
          "name": "2",
          "slug": "item_2sub",
          "url": "thing.html"
        }, {
          "name": "3",
          "slug": "item_3",
          "url": "thing.html"
        }, {
          "name": "4",
          "slug": "item_4",
          "url": "thing.html"
        }, {
          "name": "5",
          "slug": "item_5",
          "url": "thing.html",
          "children": [
            {
              "name": "..1",
              "slug": "item_1",
              "url": "thing.html"
            }, {
              "name": "..2",
              "slug": "item_1",
              "url": "thing.html"
            }, {
              "name": "..3",
              "slug": "item_1",
              "url": "thing.html"
            }
          ]
        }
      ]
    }, {
      "name": "item 11",
      "slug": "item_11",
      "url": "what.html"
    }, {
      "name": "item 12",
      "slug": "item_12",
      "url": "thing.html",
      "children": [
        {
          "name": "eof",
          "slug": "eof"
        }
      ]
    }
  ];

  fitTestText = 'Lorem ipsum dolor sit consectetur adipiscing Mauris at ex id mauris ultrices Praesent blandit faucibus Praesent ac quam et massa lacinia Sed tincidunt fermentum elit sit amet Mauris efficitur libero convallis molestie nulla gravida Etiam eu quam sit amet elit euismod bibendum vitae vel Duis laoreet quis leo et Aenean ipsum laoreet eu euismod convallis et Phasellus lorem consectetur efficitur magna massa consectetur quis pulvinar mauris risus eu Donec quis eros Ut fermentum vitae tellus in Nunc justo malesuada non venenatis ullamcorper id Lorem ipsum dolor sit consectetur adipiscing Mauris at ex id mauris ultrices Praesent blandit faucibus Praesent ac quam et massa lacinia. Holly hanna.Lorem ipsum dolor sit consectetur adipiscing Mauris at ex id mauris ultrices Praesent blandit faucibus Praesent ac quam et massa lacinia Sed tincidunt.';

  _ref = React.DOM, div = _ref.div, a = _ref.a, ol = _ref.ol, li = _ref.li, i = _ref.i, span = _ref.span, img = _ref.img;

  sizeMatters = new SizeMatters();

  $(function() {

    /*
      HASH FUNCTIONALITY IS FOR TESTING ONLY
      REMOVE FOR ANY PRODUCTION USE
     */
    var menuPath;
    if (window.location.hash) {
      $("body").addClass(window.location.hash.substr(1));
    }
    menuPath = 'json/menu.json';
    $.ajax({
      url: menuPath,
      dataType: "json",
      type: 'GET',
      error: function(jqXHR, textStatus, errorThrown) {
        console.error("Unable to load menu data remotely: using dummy data");
        return parseMenu(dummyMenuData);
      },
      success: function(data, textStatus, jqXHR) {
        return parseMenu(data);
      }
    });
    $(window).resize(function() {
      if ($(window).width() >= 660 && $(".scaffold__modal")) {
        closeLeftMenu();
      }
      return showFitTest();
    });
    return showFitTest();
  });

  showFitTest = function() {
    var params;
    params = {
      text: fitTestText,
      target: $("#fit-test"),
      className: "fit-test"
    };
    return $("#fit-test").html(sizeMatters.howMuchWillFit(params));
  };

  parseMenu = function(data, par) {
    var howBigOptions, menu, tempData, _i, _len;
    if (par == null) {
      par = null;
    }
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      menu = data[_i];
      howBigOptions = {
        text: menu.name,
        className: "top-menu__item"
      };
      tempData = {
        name: menu.name,
        slug: menu.slug,
        url: menu.url,
        leftWidth: null,
        visible: 1,
        topWidth: sizeMatters.howBigWillThisBe(howBigOptions).width
      };
      if (par != null) {
        tempData.parent = par;
      }
      if (menu.children) {
        tempData.children = menu.slug;
      }
      menuData.push(tempData);
      if (menu.children) {
        parseMenu(menu.children, menu.slug);
      }
    }
    if ((par == null) && data === dummyMenuData) {
      drawLeftMenu();
      return drawTopMenu();
    }
  };

  drawLeftMenu = function() {
    var obj, subMenuToActivate, submenu, submenus, where, _i, _len, _results;
    obj = {
      menu_data: menuData
    };
    where = document.getElementById("left-menu__holder");
    React.render(window.LeftMenu(obj), where);
    $(".scaffold__menu-close-btn").on("click", function() {
      return closeLeftMenu();
    });
    $("[class*='left-menu__item']").on("click", function() {
      return showSubMenuItems($(this));
    });
    submenus = [];
    $("*[data-role='has_submenu']").each(function() {
      return submenus.push($(this).data('children'));
    });
    _results = [];
    for (_i = 0, _len = submenus.length; _i < _len; _i++) {
      submenu = submenus[_i];
      if ($("body").hasClass(submenu)) {
        subMenuToActivate = $('*[data-children="' + submenu + '"]');
        showSubMenuItems(subMenuToActivate);
        if (subMenuToActivate.data('parent')) {
          _results.push(showAllParentsOf(subMenuToActivate));
        } else {
          _results.push(void 0);
        }
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  drawTopMenu = function() {
    var obj, where;
    obj = {
      menu_data: menuData
    };
    where = document.getElementById("top-menu__holder");
    return React.render(window.TopMenu(obj), where);
  };

  showSubMenuItems = function(subMenu) {
    var child_element_val, child_state, data_url, new_child_state;
    if (subMenu.data('role') === 'has_submenu') {
      child_state = subMenu.data('child_state');
      new_child_state = 'visible';
      if (child_state != null) {
        if (child_state === 'visible') {
          new_child_state = 'hidden';
        } else {
          new_child_state = 'visible';
        }
      }
      child_element_val = subMenu.data('children');
      $("*[data-parent='" + child_element_val + "']").each(function() {
        if (new_child_state === 'hidden') {
          $(this).slideUp();
          if ($(this).data('children')) {
            return hideAllChildrenOf($(this).data('children'));
          }
        } else if (new_child_state === 'visible') {
          return $(this).slideDown();
        }
      });
      return subMenu.data('child_state', new_child_state);
    } else {
      data_url = subMenu.data('url');
      if (data_url) {
        return window.location = data_url;
      }
    }
  };

  window.openLeftMenu = function() {
    $(".scaffold__menu").addClass("scaffold__menu--open");
    return $(".scaffold__content").addClass("scaffold__content--open");
  };

  window.closeLeftMenu = function() {
    $(".scaffold__menu").removeClass("scaffold__menu--open");
    return $(".scaffold__content").removeClass("scaffold__content--open");
  };


  /*
    Recursive methods for hiding and showing submenu items
   */

  getParentsOf = function(item, depth) {
    var hasParent, item_parent, menu_item, _i, _len;
    hasParent = 0;
    item_parent = '';
    depth++;
    for (_i = 0, _len = menuData.length; _i < _len; _i++) {
      menu_item = menuData[_i];
      if (menu_item.slug === item && menu_item.parent) {
        hasParent = 1;
        item_parent = menu_item.parent;
      }
    }
    if (hasParent === 1) {
      return getParentsOf(item_parent, depth);
    } else {
      return depth;
    }
  };

  window.determineDepth = function(menu_item) {
    var depth;
    depth = 1;
    if (!menu_item.parent) {
      return depth;
    }
    return getParentsOf(menu_item.parent, depth);
  };

}).call(this);
