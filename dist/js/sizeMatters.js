// Generated by CoffeeScript 1.9.0
(function() {
  window.SizeMatters = (function() {
    var housingDiv, housingDivID, housingDivStyle;

    housingDivID = "_sizeMattersHousing";

    housingDivStyle = "opacity: 0; left: -100000px; top: -100000px;";

    housingDiv = '';


    /*
      PRIVATE METHODS
     */

    function SizeMatters(namespace) {
      if (!this.doesjQueryExist()) {
        return false;
      }
      if (namespace != null) {
        housingDivID = namespace;
      }
      this.housingDivString = "<div id='" + housingDivID + "'></div>";
    }

    SizeMatters.prototype.doesjQueryExist = function() {
      if (jQuery) {
        return true;
      } else {
        console.warn("SizeMatters requires jQuery to run.");
        return false;
      }
    };


    /*
      PUBLIC METHODS
     */

    SizeMatters.prototype.willItFit = function(text, params) {
      if (!this.doesjQueryExist()) {
        return false;
      }
    };

    SizeMatters.prototype.howMuchWillFit = function(text, params) {
      if (!this.doesjQueryExist()) {
        return false;
      }
    };

    SizeMatters.prototype.howBigWillThisBe = function(text, params) {
      var dimensions, divParams, divText, newItem, tempItemHandle;
      if (!this.doesjQueryExist()) {
        return false;
      }
      $("body").append(this.housingDivString);
      housingDiv = $("#" + housingDivID);
      if (typeof text === 'string') {
        divText = text;
        divParams = params;
      } else if (typeof text === 'object') {
        divText = text.text;
        divParams = text;
      }
      if (divParams.className != null) {
        newItem = "<div id='_sizeMatters_tempItem' ";
        newItem += "class='" + divParams.className + "'>";
      } else {
        newItem = '<div style="';
        if (divParams.fontFamily != null) {
          newItem += "font-family: " + (divParams.font - family) + "; ";
        }
        if (divParams.fontSize != null) {
          newItem += "font-size: " + (divParams.font - size) + "; ";
        }
        if (divParams.width != null) {
          newItem += "width: " + divParams.width + "; ";
        }
      }
      newItem += "'>";
      newItem += divText;
      newItem += '</div>';
      housingDiv.append(newItem);
      tempItemHandle = housingDiv.find("#_sizeMatters_tempItem");
      dimensions = {
        width: tempItemHandle.width() + margins,
        height: tempItemHandle.height() + paddings
      };
      tempItemHandle.remove();
      housingDiv.remove();
      return dimensions;
    };

    return SizeMatters;

  })();

}).call(this);
